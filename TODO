[src/cil.ml]
* Check indentation in pStmtKind (for CPC constructs)
  => should be quite good already.
* Handle CPC constructs in computeCFGInfo (function succpred_stmt)
  => needs careful analysis. Handling in xform_switch_stmt is probably
     broken too, btw. Anyway, this is now done in src/ext/cfg.ml.
* Improve xform_switch_stmt (needless to eliminate inner loops)
* peepHole doesn't dive into CpcFun
  => I think one should lambda-lift CpcFun before using it anyway.
     It is used in src/frontc/cabs2cil.ml too, but there is no
     local functions at this stage.

[src/ext/...]
* Check and correct the rough support of cpc constructs

[src/ext/cfg.ml]
* Check local functions support.
  => look quite good, but who knows?

[src/ext/cpc.ml]
* OPT: Local variables used in a single sub-function should be made
  local to that function before lambda-lifting.
* in CPS conversion, if there is a typo in a cpc_spawn, building fails
  with a Not_found error message
  => print a more informative error message (or check it before)
* in avoidAmpersand
  => what about arrays?
* OPT: There is an inefficiency with return values:
  x = f(); return x; is converted to
  x = f(); w(x); return; with w(x){return x;}
  This is by design in CPC but I think we can't avoid it anyway since
  CIL (sometimes) produces the following in the first place:
  tmp = f(); x = tmp;
  (Yes, even when there is NO cast implied.)
  In that case, w becomes: w(tmp){x = tmp; return x;}
  Both cases could probably be optimized just before cps conversion,
  basically by removing w (this would save a function call, and a patch,
  f patching directly the next continuation, instead of going through 
  w).

[src/ext/dataflow.ml]
* CpcConstructs do not contain instructions, but they contain
  expressions, should we ignore them too?
  => probably yes, just like if, switch, etc.

[src/frontc/cabs2cil.ml]
* check transformation of CPC_FUN (scoping, globals, etc.)

[src/check.ml]
* do the right thing with CpcFun (there is much more to save and restore
  than the few global references I deal with --- hashtables, startEnv(),
  etc.)

[runtime/cpc_runtime.c]
* Include a trampoline in detached mode
  => use thread-local variables?
* What about condition variables in detached mode?
  => not supported at all...
* Multiple schedulers are unusable because they die (and kill the thread
  pool) when it becomes empty. So, a few questions:
  => when should a scheduler be killed? is main_loop mandatory? how to
  avoid busy wait when a scheduler has no attached continuation?
  => cpc_spawn should provide an (unambiguous) syntax to spawn to a
  specific scheduler.
