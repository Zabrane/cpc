[src/cil.ml]
* Check indentation in pStmtKind (for CPC constructs)
  => should be quite good already.
* Handle CPC constructs in computeCFGInfo (function succpred_stmt)
  => needs careful analysis. Handling in xform_switch_stmt is probably
     broken too, btw. Anyway, this is now done in src/ext/cfg.ml.
* Improve xform_switch_stmt (needless to eliminate inner loops)
* peepHole doesn't dive into CpcFun
  => I think one should lambda-lift CpcFun before using it anyway.
     It is used in src/frontc/cabs2cil.ml too, but there is no
     local functions at this stage.
[src/ext/...]
* Check and correct the rough support of cpc constructs
[src/ext/cfg.ml]
* Check local functions support.
  => look quite good, but who knows?
[src/ext/cpc.ml]
* in avoidAmpersand
  => what about arrays?
* in CPS conversion, if there is a typo in a cpc_spawn, building fails
  with a Not_found error message
  => print a more informative error message (or check it before)
[src/ext/dataflow.ml]
* CpcConstructs do not contain instructions, but they contain
  expressions, should we ignore them too?
  => probably yes, just like if, switch, etc.
[src/frontc/cabs2cil.ml]
* check transformation of CPC_FUN (scoping, globals, etc.)
[src/check.ml]
* do the right thing with CpcFun (there is much more to save and restore
  than the few global references I deal with --- hashtables, startEnv(),
  etc.)
[runtime/cpc_runtime.c]
* Fix the race condition when creating the pool (if cpc_start_scheduler
  or cpc_main_loop are called from threads).
  => define a cpc_init() function?
* Include a trampoline in detached mode
  => use thread-local variables?
* What about condition variables in detached mode?
  => not supported at all...
* Multiple schedulers are unusable because they die (and kill the thread
  pool) when it becomes empty. So, a few questions:
  => what about a thread pool per scheduler (and why the hell did I drop
  this design)?
  => when should a scheduler be killed? is main_loop mandatory? how to
  avoid busy wait when a scheduler has no attached continuation?
  => cpc_spawn should provide an (unambiguous) syntax to spawn to a
  specific scheduler.
