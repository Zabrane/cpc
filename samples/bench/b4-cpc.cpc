#include <cpc/cpc_runtime.h>
#include <stdio.h>
#include <stdlib.h>

#ifdef JOIN
#include "cpc/cpc_lib.h"
cpc_barrier *barrier;
#endif

volatile int arg;
volatile int res;

cps void thread_routine(void);

cps void
thread_routine(void)
{
    while(arg < 0)
        cpc_yield();
    res = arg;
#ifdef JOIN
    cpc_barrier_await(barrier);
#endif
}

int
main()
{
    int rc;
    int i, j, s;

    arg = -1;
    res = -1;

    cpc_spawn {
        for(i = 0; i < 10; i++) {
            s = 0;
            for(j = 0; j < 10000; j++) {
                res = -1;
                arg = j;
#ifdef JOIN
                barrier = cpc_barrier_get(2);
#endif
                cpc_spawn thread_routine();
                while(res < 0)
                    cpc_yield();
                s += res;
#ifdef JOIN
                cpc_barrier_await(barrier);
#endif
            }
        }
        printf("%d\n", s);
    }
    cpc_main_loop();
    return 0;
}
